// ==UserScript==
// @name         Antimatter Dimensions AutoClicker v7
// @namespace    http://tampermonkey.net/
// @version      7.0
// @description  Auto-clicker vertical compact avec sliders, drag sur barre, et barre de progression avant clic, position bas-gauche. Attend le chargement du jeu.
// @author       ChatGPT
// @match        http*://ivark.github.io/AntimatterDimensions/*
// @grant        none
// ==/UserScript==

(function initUI() {
    'use strict';

    const autoclickers = [
        { key: 'maxAll', label: 'MaxAll', emoji: '📈' },
        { key: 'sacrifice', label: 'Sacrifice', emoji: '🔥' },
        { key: 'tickspeed', label: 'Tickspeed', emoji: '⏱️' },
        { key: 'resetDim', label: 'Dime.Boost', emoji: '🔀' },
        { key: 'lockedChallenge', label: 'AM.Galaxies', emoji: '🌌' }
    ];

    const state = {
        maxAll: false,
        sacrifice: false,
        tickspeed: false,
        resetDim: false,
        lockedChallenge: false,
        speeds: {
            maxAll: 500,
            sacrifice: 500,
            tickspeed: 500,
            resetDim: 500,
            lockedChallenge: 500
        },
        intervals: {},
        progressTimers: {},
        progressValues: {
            maxAll: 0,
            sacrifice: 0,
            tickspeed: 0,
            resetDim: 0,
            lockedChallenge: 0
        }
    };

    // Restore saved speeds & states
    const savedSpeeds = JSON.parse(localStorage.getItem('autoclickerSpeeds') || '{}');
    for (const key of Object.keys(state.speeds)) {
        if (savedSpeeds[key]) state.speeds[key] = savedSpeeds[key];
    }

    const savedStates = JSON.parse(localStorage.getItem('autoclickerStates') || '{}');
    for (const key of Object.keys(state)) {
        if (typeof savedStates[key] === 'boolean') state[key] = savedStates[key];
    }

    // Restore UI reduced state
    let uiReduced = JSON.parse(localStorage.getItem('uiReduced')) || false;

    function formatSpeed(ms) {
        return (ms / 1000).toFixed(1) + 's';
    }

    function clickIfAvailable(selector, filterFn = () => true) {
        const btn = [...document.querySelectorAll(selector)].find(filterFn);
        if (btn && !btn.disabled && !btn.classList.contains('o-primary-btn--disabled')) {
            btn.click();
            return true;
        }
        return false;
    }

function doClick(key) {
    switch (key) {
        case 'maxAll':
            clickIfAvailable('button.o-primary-btn.l-button-container', btn => btn.textContent.includes('Max All'));
            break;
        case 'sacrifice':
            clickIfAvailable('button.o-primary-btn--sacrifice');
            break;
        case 'tickspeed':
            clickIfAvailable('button.tickspeed-max-btn');
            break;
        case 'resetDim':
            clickIfAvailable('button.o-primary-btn--dimension-reset', btn => btn.textContent.includes('Reset your Dimensions'));
            break;
        case 'lockedChallenge':
            clickIfAvailable('.reset-container.galaxy button.o-primary-btn--dimension-reset', btn => btn.textContent.includes('Reset your Dimensions and Dimension Boosts'));
            break;
    }
}
    function updateProgressBar(key, override = null) {
        const bar = progressBars[key];
        const val = override !== null ? override : state.progressValues[key];
        if (bar) bar.style.width = `${(val * 100).toFixed(1)}%`;
    }

    function updateLabel(key) {
        const content = contentRefs[key];
        if (content) content.textContent = `${emojiRefs[key]} ${labelRefs[key]} (${formatSpeed(state.speeds[key])})`;
    }

    function updateInterval(key) {
        if (state.intervals[key]) clearInterval(state.intervals[key]);
        if (state.progressTimers[key]) clearInterval(state.progressTimers[key]);

        if (state[key]) {
            const intervalMs = state.speeds[key];
            let elapsed = 0;

            const durationMs = intervalMs < 1000 ? 1000 : intervalMs;
            const stepMs = durationMs / 10;

            state.intervals[key] = setInterval(() => {
                doClick(key);
                state.progressValues[key] = 1;
                updateProgressBar(key);
                setTimeout(() => {
                    state.progressValues[key] = 0;
                    updateProgressBar(key);
                    elapsed = 0;
                }, 100);
            }, intervalMs);

            state.progressTimers[key] = setInterval(() => {
                elapsed += stepMs;
                const progress = intervalMs < 1000 ? elapsed / 1000 : elapsed / intervalMs;
                if (elapsed < durationMs) {
                    state.progressValues[key] = progress;
                    updateProgressBar(key);
                }
            }, stepMs);
        } else {
            updateProgressBar(key, 0);
        }
    }

    const ui = document.createElement('div');
    ui.style.position = 'fixed';
    ui.style.left = '6px';
    ui.style.bottom = '3%';
    ui.style.background = '#111';
    ui.style.border = '1px solid #333';
    ui.style.borderRadius = '6px';
    ui.style.padding = '6px 6px 10px 6px';
    ui.style.zIndex = '9999';
    ui.style.fontFamily = 'Arial, sans-serif';
    ui.style.color = '#eee';
    ui.style.fontSize = '12px';
    ui.style.width = '200px';
    ui.style.userSelect = 'none';
    ui.style.display = 'flex';
    ui.style.flexDirection = 'column';
    ui.style.gap = '6px';
    ui.style.boxShadow = '0 0 8px rgba(0,0,0,0.7)';

    // On gère la hauteur UI selon uiReduced
function updateUIHeightAndSliders() {
    autoclickers.forEach(({ key }) => {
        const container = buttonContainers[key];
        const slider = sliders[key];
        const btn = buttonElements[key];
        if (uiReduced) {
            container.style.height = '30px'; // plus petit quand réduit
            slider.style.display = 'none';
            btn.style.height = '30px';
            btn.style.fontSize = '13px';
        } else {
            container.style.height = '40px'; // hauteur réduite normale
            slider.style.display = 'block';
            btn.style.height = '40px';
            btn.style.fontSize = '13px';
        }
    });
}

    // === STATUS DIV + boutons autobuyer + auto crunch ===
    const statusDiv = document.createElement('div');
    statusDiv.style.textAlign = 'center';
    statusDiv.style.fontWeight = 'bold';
    statusDiv.style.fontSize = '10x';
    statusDiv.style.display = 'flex';
    statusDiv.style.justifyContent = 'space-between';
    statusDiv.style.alignItems = 'center';

    const autobuyerBtn = document.createElement('button');
    autobuyerBtn.style.padding = '4px 10px';
    autobuyerBtn.style.borderRadius = '6px';
    autobuyerBtn.style.border = '1px solid #555';
    autobuyerBtn.style.background = '#222';
    autobuyerBtn.style.color = '#ccc';
    autobuyerBtn.style.cursor = 'pointer';
    autobuyerBtn.style.userSelect = 'none';
    autobuyerBtn.style.fontWeight = 'bold';
    autobuyerBtn.textContent = 'Autobuyers: ?';
// Styles à ajouter/modifier pour autobuyerBtn et crunchToggle
autobuyerBtn.style.width = '120px';
autobuyerBtn.style.whiteSpace = 'nowrap';
autobuyerBtn.style.overflow = 'hidden';
autobuyerBtn.style.textOverflow = 'ellipsis';
autobuyerBtn.style.boxSizing = 'border-box';
autobuyerBtn.style.fontSize = '8x';    // taille réduite
autobuyerBtn.style.height = '28px';
autobuyerBtn.style.lineHeight = '28px';
autobuyerBtn.style.padding = '0 8px';

function updateAutobuyerButton() {
    try {
        const isOn = window.player && window.player.auto && window.player.auto.autobuyersOn;
        if (typeof isOn === 'boolean') {
            autobuyerBtn.textContent = `Autobuyers: ${isOn ? 'ON' : 'OFF'}`;
            autobuyerBtn.style.color = isOn ? '#0f0' : '#f33';
            autobuyerBtn.style.borderColor = isOn ? '#0f0' : '#f33';
        } else {
            autobuyerBtn.textContent = 'Autobuyers: ?';
            autobuyerBtn.style.color = '#ccc';
            autobuyerBtn.style.borderColor = '#555';
        }
    } catch {
        autobuyerBtn.textContent = 'Autobuyers: ?';
        autobuyerBtn.style.color = '#ccc';
        autobuyerBtn.style.borderColor = '#555';
    }
}

setInterval(updateAutobuyerButton, 500);


    // Auto Crunch toggle (même style que autobuyer)
    let crunchInterval = null;
    let crunchAuto = JSON.parse(localStorage.getItem('crunchAuto')) || false;
    const crunchToggle = document.createElement('button');
    crunchToggle.textContent = `Auto Crunch: ${crunchAuto ? 'ON' : 'OFF'}`;
    crunchToggle.style.padding = '4px 10px';
    crunchToggle.style.borderRadius = '6px';
    crunchToggle.style.border = '1px solid #555';
    crunchToggle.style.background = '#222';
    crunchToggle.style.color = crunchAuto ? '#0f0' : '#ccc';
    crunchToggle.style.cursor = 'pointer';
    crunchToggle.style.userSelect = 'none';
    crunchToggle.style.fontWeight = 'bold';
    // CrunchToggle style modifié
crunchToggle.style.width = '120px';
crunchToggle.style.whiteSpace = 'nowrap';
crunchToggle.style.overflow = 'hidden';
crunchToggle.style.textOverflow = 'ellipsis';
crunchToggle.style.boxSizing = 'border-box';
crunchToggle.style.fontSize = '8';
crunchToggle.style.height = '28px';
crunchToggle.style.lineHeight = '28px';
crunchToggle.style.padding = '0 8px';

    crunchToggle.onclick = () => {
        crunchAuto = !crunchAuto;
        localStorage.setItem('crunchAuto', JSON.stringify(crunchAuto));
        crunchToggle.textContent = `Auto Crunch: ${crunchAuto ? 'ON' : 'OFF'}`;
        crunchToggle.style.color = crunchAuto ? '#0f0' : '#ccc';
        crunchToggle.style.borderColor = crunchAuto ? '#0f0' : '#555';

        if (crunchAuto) {
            crunchInterval = setInterval(() => {
                const btn = document.querySelector('button.btn-big-crunch.btn-big-crunch--small');
                if (btn && !btn.disabled) btn.click();
            }, 5000);
        } else {
            clearInterval(crunchInterval);
        }
    };

    if (crunchAuto) {
        crunchInterval = setInterval(() => {
            const btn = document.querySelector('button.btn-big-crunch.btn-big-crunch--small');
            if (btn && !btn.disabled) btn.click();
        }, 5000);
    }

    statusDiv.appendChild(autobuyerBtn);
    statusDiv.appendChild(crunchToggle);
    ui.appendChild(statusDiv);

    const sep = document.createElement('hr');
    sep.style.border = 'none';
    sep.style.height = '1px';
    sep.style.background = '#444';
    sep.style.margin = '4px 0';
    ui.appendChild(sep);

    const progressBars = {};
    const contentRefs = {};
    const labelRefs = {};
    const emojiRefs = {};
    const minLog = Math.log10(100);
    const maxLog = Math.log10(60000);

    // Stockage containers et sliders pour accès facile
    const buttonContainers = {};
    const sliders = {};
    const buttonElements = {};

    autoclickers.forEach(({ key, label, emoji }) => {
        labelRefs[key] = label;
        emojiRefs[key] = emoji;

        const container = document.createElement('div');
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        container.style.height = '70px'; // hauteur normale

        const btn = document.createElement('div');
        btn.title = label;
        btn.style.flex = 'none';
        btn.style.height = '40px';
        btn.style.borderRadius = '6px';
        btn.style.border = '1px solid #333';
        btn.style.background = '#222';
        btn.style.color = '#fff';
        btn.style.fontSize = '14px';
        btn.style.cursor = 'pointer';
        btn.style.display = 'flex';
        btn.style.flexDirection = 'column';
        btn.style.justifyContent = 'space-between';
        btn.style.alignItems = 'center';
        btn.style.position = 'relative';
        btn.style.overflow = 'hidden';
        btn.style.padding = '2px 2px';
        btn.style.borderColor = state[key] ? '#0f0' : '#333';

        btn.addEventListener('click', (e) => {
            if (e.target.tagName.toLowerCase() === 'input') return;
            state[key] = !state[key];
            btn.style.borderColor = state[key] ? '#0f0' : '#333';
            updateInterval(key);
            localStorage.setItem('autoclickerStates', JSON.stringify({
                ...JSON.parse(localStorage.getItem('autoclickerStates') || '{}'),
                [key]: state[key]
            }));
        });

        const progressBar = document.createElement('div');
        progressBar.style.position = 'absolute';
        progressBar.style.top = '0';
        progressBar.style.left = '0';
        progressBar.style.height = '100%';
        progressBar.style.width = '0%';
        progressBar.style.background = '#006400';
        progressBar.style.transition = 'width 0.05s linear';
        progressBar.style.zIndex = '1';

        const innerContent = document.createElement('div');
        innerContent.textContent = `${emoji} ${label} (${formatSpeed(state.speeds[key])})`;
        innerContent.style.zIndex = '2';
        innerContent.style.pointerEvents = 'none';
        contentRefs[key] = innerContent;

        const slider = document.createElement('input');
        slider.type = 'range';
        slider.min = 0;
        slider.max = 1000;
        slider.step = 1;
        slider.value = ((Math.log10(state.speeds[key]) - minLog) / (maxLog - minLog)) * 1000;
        slider.style.width = '90%';
        slider.style.marginTop = '0px';
        slider.style.cursor = 'pointer';
        slider.style.zIndex = '2';

        slider.addEventListener('click', e => e.stopPropagation());
        slider.addEventListener('mousedown', e => e.stopPropagation());
        slider.addEventListener('touchstart', e => e.stopPropagation());

        slider.addEventListener('input', () => {
            const logValue = minLog + ((maxLog - minLog) * (slider.value / 1000));
            const speedMs = Math.round(Math.pow(10, logValue));
            state.speeds[key] = speedMs;
            updateLabel(key);
            updateInterval(key);

            localStorage.setItem('autoclickerSpeeds', JSON.stringify({
                ...JSON.parse(localStorage.getItem('autoclickerSpeeds') || '{}'),
                [key]: speedMs
            }));
        });

        btn.appendChild(progressBar);
        btn.appendChild(innerContent);
        btn.appendChild(slider);
        container.appendChild(btn);
        ui.appendChild(container);

        progressBars[key] = progressBar;
        buttonContainers[key] = container;
        sliders[key] = slider;
        buttonElements[key] = btn;
    });

    // Mise à jour de l'UI au démarrage
    updateUIHeightAndSliders();

function updateUIHeightAndSliders() {
    autoclickers.forEach(({ key }) => {
        const container = buttonContainers[key];
        const slider = sliders[key];
        const btn = buttonElements[key];
        if (uiReduced) {
            container.style.height = '20px';  // encore plus compact en mode réduit
            slider.style.display = 'none';
            btn.style.height = '20px';
            btn.style.fontSize = '12px';
        } else {
            container.style.height = '40px';
            slider.style.display = 'block';
            btn.style.height = '40px';
            btn.style.fontSize = '13px';
        }
    });
}


    // Réduit / agrandit UI toggle button
    const dragBar = document.createElement('div');
    dragBar.style.height = '4px';
    dragBar.style.backgroundColor = '#999';
    dragBar.style.cursor = 'move';
    dragBar.style.userSelect = 'none';
    dragBar.style.position = 'relative';
    dragBar.style.marginTop = '6px';
    dragBar.style.display = 'flex';
    dragBar.style.justifyContent = 'flex-end';
    dragBar.style.alignItems = 'center';
    dragBar.style.paddingRight = '6px';

    const reduceToggle = document.createElement('button');
    reduceToggle.textContent = uiReduced ? '▶' : '▼';
    reduceToggle.title = 'Réduire/Agrandir';
    reduceToggle.style.background = '#222';
    reduceToggle.style.border = '1px solid #555';
    reduceToggle.style.color = '#ccc';
    reduceToggle.style.cursor = 'pointer';
    reduceToggle.style.borderRadius = '6px';
    reduceToggle.style.width = '30px';
    reduceToggle.style.height = '26px';
    reduceToggle.style.fontWeight = 'bold';
    reduceToggle.style.userSelect = 'none';

    reduceToggle.onclick = (e) => {
        e.stopPropagation();
        uiReduced = !uiReduced;
        localStorage.setItem('uiReduced', JSON.stringify(uiReduced));
        reduceToggle.textContent = uiReduced ? '▶' : '▼';
        updateUIHeightAndSliders();
    };

    dragBar.appendChild(reduceToggle);
    ui.appendChild(dragBar);

    // Drag & drop limité dans la fenêtre
    let isDragging = false;
    let dragStartX = 0;
    let dragStartY = 0;
    let origLeft = 0;
    let origBottom = 0;

    dragBar.addEventListener('mousedown', (e) => {
        isDragging = true;
        dragStartX = e.clientX;
        dragStartY = e.clientY;
        origLeft = parseInt(ui.style.left);
        origBottom = parseInt(ui.style.bottom);
        e.preventDefault();
    });

    window.addEventListener('mouseup', () => {
        isDragging = false;
    });

    window.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        const dx = e.clientX - dragStartX;
        const dy = dragStartY - e.clientY; // bottom = distance from bottom of viewport

        let newLeft = origLeft + dx;
        let newBottom = origBottom + dy;

        // Clamp left and bottom inside window
        newLeft = Math.min(Math.max(newLeft, 0), window.innerWidth - ui.offsetWidth);
        newBottom = Math.min(Math.max(newBottom, 0), window.innerHeight - ui.offsetHeight);

        ui.style.left = `${newLeft}px`;
        ui.style.bottom = `${newBottom}px`;
    });

    // Lancer toutes les intervalles déjà activées
    autoclickers.forEach(({ key }) => {
        updateInterval(key);
    });

    document.body.appendChild(ui);

    function updateTitleWithIP() {
    const ipElement = document.querySelector('.c-game-header__ip-amount');
    if (ipElement && ipElement.textContent.trim()) {
        document.title = `${ipElement.textContent.trim()} - AM.Dim`;
    }
}

// Met à jour le titre toutes les 500 ms
setInterval(updateTitleWithIP, 1000);

function updateTitleWithIP() {
    const ipElement = document.querySelector('.c-game-header__ip-amount');
    if (ipElement && ipElement.textContent.trim()) {
        document.title = `${ipElement.textContent.trim()} - Antimatter Dimensions`;
    }
}

// Met à jour le titre toutes les 500 ms
setInterval(updateTitleWithIP, 1000);


})();
